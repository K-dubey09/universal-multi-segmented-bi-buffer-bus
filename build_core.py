# UMSBB Core Builder
# Customizable build system for creating your own WebAssembly core

import os
import sys
import subprocess
import json
from pathlib import Path

class UMSBBCoreBuilder:
    def __init__(self):
        self.base_dir = Path(__file__).parent
        self.features = {
            'performance_testing': True,
            'detailed_statistics': True,
            'error_checking': True,
            'memory_debugging': False,
            'custom_allocators': False,
            'network_support': False,
            'compression': False,
            'encryption': False
        }
        self.optimization_level = 3
        self.target_platform = 'wasm'
        self.output_dir = self.base_dir / 'build'
    
    def configure_features(self, **kwargs):
        """Configure which features to include in the build"""
        for feature, enabled in kwargs.items():
            if feature in self.features:
                self.features[feature] = enabled
                print(f"Feature '{feature}': {'enabled' if enabled else 'disabled'}")
    
    def set_optimization(self, level):
        """Set optimization level (0-3)"""
        if 0 <= level <= 3:
            self.optimization_level = level
            print(f"Optimization level set to: O{level}")
    
    def set_target(self, platform):
        """Set target platform (wasm, native-linux, native-windows, native-macos)"""
        valid_targets = ['wasm', 'native-linux', 'native-windows', 'native-macos']
        if platform in valid_targets:
            self.target_platform = platform
            print(f"Target platform set to: {platform}")
    
    def generate_build_config(self):
        """Generate build configuration header"""
        config_content = f"""/*
 * UMSBB Build Configuration
 * Auto-generated by UMSBBCoreBuilder
 */

#ifndef UMSBB_BUILD_CONFIG_H
#define UMSBB_BUILD_CONFIG_H

// Feature flags
"""
        
        for feature, enabled in self.features.items():
            flag_name = f"UMSBB_{feature.upper()}"
            config_content += f"#define {flag_name} {'1' if enabled else '0'}\n"
        
        config_content += f"""
// Build configuration
#define UMSBB_OPTIMIZATION_LEVEL {self.optimization_level}
#define UMSBB_TARGET_PLATFORM "{self.target_platform}"

// Conditional includes based on features
"""
        
        if self.features['performance_testing']:
            config_content += "#define UMSBB_INCLUDE_BENCHMARKS\n"
        
        if self.features['memory_debugging']:
            config_content += "#define UMSBB_DEBUG_MEMORY\n"
        
        config_content += "\n#endif /* UMSBB_BUILD_CONFIG_H */\n"
        
        config_path = self.base_dir / 'umsbb_build_config.h'
        with open(config_path, 'w') as f:
            f.write(config_content)
        
        print(f"Build configuration generated: {config_path}")
        return config_path
    
    def get_compiler_flags(self):
        """Get compiler flags based on configuration"""
        base_flags = [f"-O{self.optimization_level}", "-std=c11"]
        
        if self.target_platform == 'wasm':
            emcc_flags = [
                "-s", "WASM=1",
                "-s", "EXPORTED_FUNCTIONS=[" + 
                    "'_umsbb_init_system'," +
                    "'_umsbb_shutdown_system'," +
                    "'_umsbb_create_buffer'," +
                    "'_umsbb_write_message'," +
                    "'_umsbb_read_message'," +
                    "'_umsbb_destroy_buffer'," +
                    "'_umsbb_get_total_messages'," +
                    "'_umsbb_get_total_bytes'," +
                    "'_umsbb_get_pending_messages'," +
                    "'_umsbb_get_active_segments'," +
                    "'_umsbb_get_comprehensive_stats'," +
                    "'_umsbb_get_max_message_size'," +
                    "'_umsbb_get_version'," +
                    "'_umsbb_get_error_string'," +
                    "'_umsbb_get_buffer_config'," +
                    "'_umsbb_get_system_info'," +
                    "'_umsbb_malloc'," +
                    "'_umsbb_free'"
            ]
            
            if self.features['performance_testing']:
                emcc_flags[3] = emcc_flags[3][:-1] + ",'_umsbb_run_performance_test']"
            else:
                emcc_flags[3] += "]"
            
            emcc_flags.extend([
                "-s", "EXPORTED_RUNTIME_METHODS=[\"ccall\", \"cwrap\"]",
                "-s", "ALLOW_MEMORY_GROWTH=1",
                "-s", "MAXIMUM_MEMORY=134217728",  # 128MB
                "-s", "MODULARIZE=1",
                "-s", "EXPORT_NAME=UMSBBCore",
                "-s", "ENVIRONMENT=web,node"
            ])
            
            return base_flags + emcc_flags
        else:
            # Native compilation flags
            native_flags = ["-shared", "-fPIC", "-Wall", "-Wextra"]
            
            if 'linux' in self.target_platform:
                native_flags.extend(["-lpthread", "-lm"])
            elif 'windows' in self.target_platform:
                native_flags.extend(["-lwinmm", "-lws2_32"])
            
            return base_flags + native_flags
    
    def build(self, custom_source=None):
        """Build the UMSBB core"""
        print(f"Building UMSBB Core v4.0")
        print(f"Target: {self.target_platform}")
        print(f"Optimization: O{self.optimization_level}")
        print(f"Features: {[f for f, e in self.features.items() if e]}")
        
        # Create output directory
        self.output_dir.mkdir(exist_ok=True)
        
        # Generate build configuration
        config_path = self.generate_build_config()
        
        # Determine source file
        source_file = custom_source or (self.base_dir / 'umsbb_complete_core.c')
        
        # Determine compiler and output
        if self.target_platform == 'wasm':
            compiler = 'emcc'
            output_file = self.output_dir / 'umsbb_core.js'
        else:
            compiler = 'gcc'
            if 'windows' in self.target_platform:
                output_file = self.output_dir / 'umsbb_core.dll'
            else:
                output_file = self.output_dir / 'libumsbb_core.so'
        
        # Build command
        cmd = [compiler] + self.get_compiler_flags() + [
            f"-I{self.base_dir}",
            str(source_file),
            "-o", str(output_file)
        ]
        
        print(f"\\nExecuting: {' '.join(cmd)}")
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True)
            
            if result.returncode == 0:
                print(f"✅ Build successful!")
                print(f"Output: {output_file}")
                
                if self.target_platform == 'wasm':
                    wasm_file = output_file.with_suffix('.wasm')
                    print(f"WebAssembly: {wasm_file}")
                
                # Copy to connector directories
                self.deploy_to_connectors()
                
                return True
            else:
                print(f"❌ Build failed!")
                print(f"Error: {result.stderr}")
                return False
                
        except subprocess.CalledProcessError as e:
            print(f"❌ Build failed!")
            print(f"Error: {e.stderr}")
            return False
        except FileNotFoundError:
            print(f"❌ Compiler '{compiler}' not found!")
            print("Please install the required compiler:")
            if compiler == 'emcc':
                print("- Emscripten SDK: https://emscripten.org/")
            else:
                print("- GCC or compatible C compiler")
            return False
    
    def deploy_to_connectors(self):
        """Deploy built files to connector directories"""
        if self.target_platform == 'wasm':
            # Deploy to JavaScript and web directories
            js_file = self.output_dir / 'umsbb_core.js'
            wasm_file = self.output_dir / 'umsbb_core.wasm'
            
            target_dirs = [
                self.base_dir / 'connectors' / 'javascript',
                self.base_dir / 'web'
            ]
            
            for target_dir in target_dirs:
                if target_dir.exists():
                    try:
                        if js_file.exists():
                            import shutil
                            shutil.copy2(js_file, target_dir)
                        if wasm_file.exists():
                            import shutil
                            shutil.copy2(wasm_file, target_dir)
                        print(f"✅ Deployed to {target_dir}")
                    except Exception as e:
                        print(f"⚠️ Failed to deploy to {target_dir}: {e}")
    
    def clean(self):
        """Clean build artifacts"""
        import shutil
        if self.output_dir.exists():
            shutil.rmtree(self.output_dir)
            print("✅ Build directory cleaned")
        
        config_file = self.base_dir / 'umsbb_build_config.h'
        if config_file.exists():
            config_file.unlink()
            print("✅ Build configuration cleaned")

def main():
    """Command line interface"""
    import argparse
    
    parser = argparse.ArgumentParser(description='UMSBB Core Builder v4.0')
    parser.add_argument('action', choices=['build', 'clean', 'configure'], 
                       help='Action to perform')
    parser.add_argument('--target', choices=['wasm', 'native-linux', 'native-windows', 'native-macos'],
                       default='wasm', help='Target platform')
    parser.add_argument('--optimization', '-O', type=int, choices=[0, 1, 2, 3], default=3,
                       help='Optimization level')
    parser.add_argument('--source', help='Custom source file path')
    
    # Feature flags
    parser.add_argument('--no-performance-testing', action='store_true',
                       help='Disable performance testing features')
    parser.add_argument('--no-detailed-statistics', action='store_true',
                       help='Disable detailed statistics')
    parser.add_argument('--enable-memory-debugging', action='store_true',
                       help='Enable memory debugging')
    parser.add_argument('--enable-compression', action='store_true',
                       help='Enable compression support')
    
    args = parser.parse_args()
    
    builder = UMSBBCoreBuilder()
    
    # Configure features
    feature_config = {}
    if args.no_performance_testing:
        feature_config['performance_testing'] = False
    if args.no_detailed_statistics:
        feature_config['detailed_statistics'] = False
    if args.enable_memory_debugging:
        feature_config['memory_debugging'] = True
    if args.enable_compression:
        feature_config['compression'] = True
    
    if feature_config:
        builder.configure_features(**feature_config)
    
    builder.set_target(args.target)
    builder.set_optimization(args.optimization)
    
    if args.action == 'build':
        success = builder.build(args.source)
        sys.exit(0 if success else 1)
    elif args.action == 'clean':
        builder.clean()
    elif args.action == 'configure':
        builder.generate_build_config()
        print("Configuration generated. Run 'build' to compile.")

if __name__ == '__main__':
    main()